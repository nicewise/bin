#!/usr/bin/julia

function array_scanner(fn::String, T::Type, header::Bool=false)# TODO: codes for header=true
    f = readlines(fn)
    n = length(f)
    m = length(split(f[2]))
    out = Matrix{T}(undef, n, m)
    for i in 1:n
        a = split(f[i], " ")
        for j in 1:m
            out[i,j] = parse(T, a[j])
        end
    end
    if m == 1
        return(out[:])
    else
        return(out)
    end
end
function array_printer(matrix::Matrix, fn::String)
    (m, n) = size(matrix)
    open(fn, "w") do f
        for i in 1:m
            for j in 1:n-1
                write(f, string(matrix[i, j]), ' ')
            end
            write(f, string(matrix[i, n]), '\n')
        end
    end
    return(Nothing)
end
function array_printer(vector::Vector, fn::String)
    n = length(vector)
    open(fn, "w") do f
        for i in 1:n-1
            write(f, string(vector[i]), '\n')
        end
        write(f, string(vector[end]))
    end
    return(Nothing)
end
fn = ARGS[1]
o = array_scanner(fn, Int)
o = sort(unique(o))
array_printer(o, fn)
